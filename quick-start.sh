#!/bin/bash

# Hedera MCP Server Quick Start Script
# Automates the setup and deployment process

set -e

echo "üöÄ Hedera MCP Server Quick Start"
echo "================================="

# Check if Docker is installed
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker is not installed. Please install Docker first."
    exit 1
fi

# Check if Docker Compose is installed
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose is not installed. Please install Docker Compose first."
    exit 1
fi

# Function to prompt for user input
prompt_input() {
    local prompt_text=$1
    local default_value=$2
    local variable_name=$3
    
    if [ -n "$default_value" ]; then
        read -p "$prompt_text [$default_value]: " input
        input=${input:-$default_value}
    else
        read -p "$prompt_text: " input
        while [ -z "$input" ]; do
            echo "‚ùå This value is required."
            read -p "$prompt_text: " input
        done
    fi
    
    eval "$variable_name='$input'"
}

# Create .env file if it doesn't exist
if [ ! -f .env ]; then
    echo "üìù Creating environment configuration..."
    
    # Prompt for required values
    echo ""
    echo "Please provide the following Hedera account information:"
    echo ""
    
    prompt_input "Hedera Network (testnet/mainnet)" "testnet" HEDERA_NETWORK
    prompt_input "Hedera Operator Account ID (e.g., 0.0.123456)" "" HEDERA_OPERATOR_ID
    prompt_input "Hedera Operator Private Key" "" HEDERA_OPERATOR_KEY
    prompt_input "Server Account ID for HBAR payments (e.g., 0.0.789012)" "" SERVER_ACCOUNT_ID
    prompt_input "Server Account Private Key" "" SERVER_PRIVATE_KEY
    prompt_input "Credits per 1 HBAR" "1000" CREDITS_CONVERSION_RATE
    
    # Create .env file
    cat > .env << EOF
# ==============================================
# Hedera MCP Server Configuration
# Generated by quick-start.sh on $(date)
# ==============================================

# Database Configuration
DATABASE_URL=postgresql://mcpuser:mcppass@postgres:5432/mcpserver
POSTGRES_DB=mcpserver
POSTGRES_USER=mcpuser
POSTGRES_PASSWORD=mcppass

# Hedera Network Configuration
HEDERA_NETWORK=$HEDERA_NETWORK
HEDERA_OPERATOR_ID=$HEDERA_OPERATOR_ID
HEDERA_OPERATOR_KEY=$HEDERA_OPERATOR_KEY

# Server Account for HBAR Payments
SERVER_ACCOUNT_ID=$SERVER_ACCOUNT_ID
SERVER_PRIVATE_KEY=$SERVER_PRIVATE_KEY

# Credits System Configuration
CREDITS_CONVERSION_RATE=$CREDITS_CONVERSION_RATE
CREDITS_MINIMUM_PAYMENT=1
CREDITS_MAXIMUM_PAYMENT=10000
CREDITS_CONFIRMATION_BLOCKS=3

# Server Configuration
PORT=3000
LOG_LEVEL=info
NODE_ENV=development

# Security Configuration
RATE_LIMIT_MAX=1000
RATE_LIMIT_WINDOW_MS=60000
API_KEY_SECRET=$(openssl rand -base64 32 2>/dev/null || echo "your_api_key_secret_here")

# MCP Server Configuration
MCP_SERVER_NAME=Hedera MCP Server
MCP_SERVER_VERSION=1.0.0
MAX_CONCURRENT_TOOLS=10

# Monitoring Configuration
ENABLE_METRICS=true
METRICS_PORT=9100

# Optional: Redis Configuration
REDIS_URL=redis://redis:6379
REDIS_ENABLED=false

# Optional: Grafana Configuration
GRAFANA_PASSWORD=admin
EOF

    echo "‚úÖ Created .env file with your configuration"
else
    echo "üìã Using existing .env file"
fi

# Ask which environment to start
echo ""
echo "Which environment would you like to start?"
echo "1) Development (with hot reload and debugging)"
echo "2) Production (optimized for production use)"
echo ""
read -p "Select option [1]: " env_choice
env_choice=${env_choice:-1}

case $env_choice in
    1)
        echo "üîß Starting development environment..."
        COMPOSE_FILE="docker-compose.dev.yml"
        ;;
    2)
        echo "üöÄ Starting production environment..."
        COMPOSE_FILE="docker-compose.prod.yml"
        
        # Update NODE_ENV to production in .env
        if grep -q "NODE_ENV=development" .env; then
            sed -i.bak 's/NODE_ENV=development/NODE_ENV=production/' .env
            echo "üìù Updated NODE_ENV to production"
        fi
        ;;
    *)
        echo "‚ùå Invalid option. Using development environment."
        COMPOSE_FILE="docker-compose.dev.yml"
        ;;
esac

# Start the services
echo ""
echo "üê≥ Starting Docker containers..."
docker-compose -f $COMPOSE_FILE up --build -d

# Wait for services to be ready
echo "‚è≥ Waiting for services to be ready..."
sleep 10

# Check if services are running
if docker-compose -f $COMPOSE_FILE ps | grep -q "Up"; then
    echo ""
    echo "‚úÖ Hedera MCP Server is now running!"
    echo ""
    echo "üåê Access Information:"
    echo "   - MCP Server: http://localhost:3000"
    echo "   - Health Check: http://localhost:3000/health"
    
    if [ "$env_choice" = "1" ]; then
        echo "   - PgAdmin: http://localhost:8080 (admin@example.com / admin)"
        echo "   - PostgreSQL: localhost:5432"
        echo "   - Debug Port: 9229"
    fi
    
    if [ "$env_choice" = "2" ]; then
        echo "   - Prometheus: http://localhost:9090"
        echo "   - Grafana: http://localhost:3001 (admin / admin)"
    fi
    
    echo ""
    echo "üí≥ HBAR Payment Information:"
    echo "   - Server Account: $SERVER_ACCOUNT_ID"
    echo "   - Conversion Rate: $CREDITS_CONVERSION_RATE credits per 1 HBAR"
    echo ""
    echo "üìö Usage:"
    echo "   - View logs: docker-compose -f $COMPOSE_FILE logs -f mcp-server"
    echo "   - Stop services: docker-compose -f $COMPOSE_FILE down"
    echo "   - Restart: docker-compose -f $COMPOSE_FILE restart"
    echo ""
    echo "üîó Test the MCP server by connecting any MCP-compatible client to:"
    echo "   http://localhost:3000/mcp"
    echo ""
    
else
    echo "‚ùå Failed to start services. Check the logs:"
    docker-compose -f $COMPOSE_FILE logs
    exit 1
fi 