version: '3.8'

x-logging: &dev-logging
  driver: "json-file"
  options:
    max-size: "5m"
    max-file: "2"

services:
  mcp-server:
    build:
      context: .
      target: development
      args:
        - BUILDKIT_INLINE_CACHE=1
    image: hedera-mcp-server:dev
    container_name: hedera-mcp-server-dev
    ports:
      - "3000:3000"  # MCP server
      - "3002:3002"  # HTTP API
      - "9229:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - DATABASE_URL=${DATABASE_URL:-sqlite://./data/credits.db}
      - HEDERA_NETWORK=${HEDERA_NETWORK:-testnet}
      - HEDERA_OPERATOR_ID=${HEDERA_OPERATOR_ID}
      - HEDERA_OPERATOR_KEY=${HEDERA_OPERATOR_KEY}
      - SERVER_ACCOUNT_ID=${SERVER_ACCOUNT_ID}
      - SERVER_PRIVATE_KEY=${SERVER_PRIVATE_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-debug}
      - CREDITS_CONVERSION_RATE=${CREDITS_CONVERSION_RATE:-1000}
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-1000}
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - NODE_OPTIONS=--inspect=0.0.0.0:9229
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ADMIN_PORTAL_URL=http://admin-portal:3001
    volumes:
      - ./src:/app/src:ro
      - ./package.json:/app/package.json:ro
      - ./tsconfig.json:/app/tsconfig.json:ro
      - ./drizzle.config.ts:/app/drizzle.config.ts:ro
      - ./drizzle.postgres.config.ts:/app/drizzle.postgres.config.ts:ro
      - ./data:/app/data
      - /app/node_modules  # Anonymous volume for node_modules
    restart: unless-stopped
    logging: *dev-logging
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - mcp-dev-network
    stdin_open: true
    tty: true

  admin-portal:
    build:
      context: ./admin-portal
      target: development
      args:
        - BUILDKIT_INLINE_CACHE=1
    image: hedera-admin-portal:dev
    container_name: hedera-admin-portal-dev
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_HEDERA_NETWORK=${HEDERA_NETWORK:-testnet}
      - NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID=${WALLETCONNECT_PROJECT_ID}
      - NEXT_PUBLIC_API_BASE_URL=http://mcp-server:3002
      - NEXT_PUBLIC_APP_URL=http://localhost:3001
      - MCP_SERVER_URL=http://mcp-server:3000/stream
    volumes:
      - ./admin-portal/app:/app/app:ro
      - ./admin-portal/components:/app/components:ro
      - ./admin-portal/lib:/app/lib:ro
      - ./admin-portal/hooks:/app/hooks:ro
      - ./admin-portal/types:/app/types:ro
      - ./admin-portal/public:/app/public:ro
      - /app/node_modules
      - /app/.next
    restart: unless-stopped
    logging: *dev-logging
    depends_on:
      - mcp-server
    networks:
      - mcp-dev-network
    profiles:
      - full

  mcp-inspector:
    image: node:22-alpine
    container_name: hedera-mcp-inspector
    command: sh -c "npm install -g @modelcontextprotocol/inspector && mcp-inspector http://mcp-server:3000/stream"
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=development
    depends_on:
      mcp-server:
        condition: service_healthy
    networks:
      - mcp-dev-network
    profiles:
      - inspector

  # Optional: Local PostgreSQL for development
  # Note: For production, use external database services like Supabase, Cloud SQL, etc.
  postgres:
    image: postgres:15-alpine
    container_name: hedera-postgres-dev
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mcpserver_dev}
      POSTGRES_USER: ${POSTGRES_USER:-mcpuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mcppass}
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./docker/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mcpuser} -d ${POSTGRES_DB:-mcpserver_dev}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    logging: *dev-logging
    networks:
      - mcp-dev-network
    profiles:
      - local-db

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: hedera-pgadmin-dev
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    restart: unless-stopped
    logging: *dev-logging
    networks:
      - mcp-dev-network
    profiles:
      - postgres

  redis:
    image: redis:7-alpine
    container_name: hedera-redis-dev
    command: redis-server --appendonly yes --loglevel debug
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    restart: unless-stopped
    logging: *dev-logging
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - mcp-dev-network
    profiles:
      - redis


volumes:
  postgres_dev_data:
    driver: local
  pgadmin_data:
    driver: local
  redis_dev_data:
    driver: local

networks:
  mcp-dev-network:
    driver: bridge